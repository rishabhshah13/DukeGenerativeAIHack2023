{"ast":null,"code":"var fs = require('fs');\nvar os = require('os');\nvar path = require('path');\nvar crypto = require('crypto');\nvar mkdirp = require('mkdirp');\nfunction getFilename(req, file, cb) {\n  crypto.randomBytes(16, function (err, raw) {\n    cb(err, err ? undefined : raw.toString('hex'));\n  });\n}\nfunction getDestination(req, file, cb) {\n  cb(null, os.tmpdir());\n}\nfunction DiskStorage(opts) {\n  this.getFilename = opts.filename || getFilename;\n  if (typeof opts.destination === 'string') {\n    mkdirp.sync(opts.destination);\n    this.getDestination = function ($0, $1, cb) {\n      cb(null, opts.destination);\n    };\n  } else {\n    this.getDestination = opts.destination || getDestination;\n  }\n}\nDiskStorage.prototype._handleFile = function _handleFile(req, file, cb) {\n  var that = this;\n  that.getDestination(req, file, function (err, destination) {\n    if (err) return cb(err);\n    that.getFilename(req, file, function (err, filename) {\n      if (err) return cb(err);\n      var finalPath = path.join(destination, filename);\n      var outStream = fs.createWriteStream(finalPath);\n      file.stream.pipe(outStream);\n      outStream.on('error', cb);\n      outStream.on('finish', function () {\n        cb(null, {\n          destination: destination,\n          filename: filename,\n          path: finalPath,\n          size: outStream.bytesWritten\n        });\n      });\n    });\n  });\n};\nDiskStorage.prototype._removeFile = function _removeFile(req, file, cb) {\n  var path = file.path;\n  delete file.destination;\n  delete file.filename;\n  delete file.path;\n  fs.unlink(path, cb);\n};\nmodule.exports = function (opts) {\n  return new DiskStorage(opts);\n};","map":{"version":3,"names":["fs","require","os","path","crypto","mkdirp","getFilename","req","file","cb","randomBytes","err","raw","undefined","toString","getDestination","tmpdir","DiskStorage","opts","filename","destination","sync","$0","$1","prototype","_handleFile","that","finalPath","join","outStream","createWriteStream","stream","pipe","on","size","bytesWritten","_removeFile","unlink","module","exports"],"sources":["/Users/rishabhshah/Desktop/GenAIGit/DukeGenAI2023/adhd-fe/node_modules/multer/storage/disk.js"],"sourcesContent":["var fs = require('fs')\nvar os = require('os')\nvar path = require('path')\nvar crypto = require('crypto')\nvar mkdirp = require('mkdirp')\n\nfunction getFilename (req, file, cb) {\n  crypto.randomBytes(16, function (err, raw) {\n    cb(err, err ? undefined : raw.toString('hex'))\n  })\n}\n\nfunction getDestination (req, file, cb) {\n  cb(null, os.tmpdir())\n}\n\nfunction DiskStorage (opts) {\n  this.getFilename = (opts.filename || getFilename)\n\n  if (typeof opts.destination === 'string') {\n    mkdirp.sync(opts.destination)\n    this.getDestination = function ($0, $1, cb) { cb(null, opts.destination) }\n  } else {\n    this.getDestination = (opts.destination || getDestination)\n  }\n}\n\nDiskStorage.prototype._handleFile = function _handleFile (req, file, cb) {\n  var that = this\n\n  that.getDestination(req, file, function (err, destination) {\n    if (err) return cb(err)\n\n    that.getFilename(req, file, function (err, filename) {\n      if (err) return cb(err)\n\n      var finalPath = path.join(destination, filename)\n      var outStream = fs.createWriteStream(finalPath)\n\n      file.stream.pipe(outStream)\n      outStream.on('error', cb)\n      outStream.on('finish', function () {\n        cb(null, {\n          destination: destination,\n          filename: filename,\n          path: finalPath,\n          size: outStream.bytesWritten\n        })\n      })\n    })\n  })\n}\n\nDiskStorage.prototype._removeFile = function _removeFile (req, file, cb) {\n  var path = file.path\n\n  delete file.destination\n  delete file.filename\n  delete file.path\n\n  fs.unlink(path, cb)\n}\n\nmodule.exports = function (opts) {\n  return new DiskStorage(opts)\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}